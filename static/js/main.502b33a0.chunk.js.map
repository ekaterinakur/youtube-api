{"version":3,"sources":["redux/actions.js","redux/reducers.js","redux/store.js","styles/index.js","components/SearchHandler.js","components/Search.jsx","components/VideoList.jsx","components/SearchPageHandler.js","components/SearchPage.jsx","components/VideoPageHandler.js","components/VideoPage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["api_key","axiosInstance","axios","create","baseURL","getVideoList","query","pageToken","dispatch","type","payload","endpoint","params","key","maxResults","part","chart","q","get","then","res","console","log","data","catch","err","nextPageToken","items","error","initialState","videos","isLoading","store","createStore","state","action","applyMiddleware","thunk","useStyles","makeStyles","theme","container","paddingTop","paddingBottom","textAlign","textField","marginBottom","listLink","position","top","left","right","bottom","SearchHandler","connect","searchString","classes","useQueryParam","StringParam","searchQuery","setQuery","TextField","value","onChange","target","length","undefined","className","fullWidth","variant","InputProps","endAdornment","InputAdornment","Search","VideoList","getId","id","videoId","GridList","cellHeight","cols","map","video","GridListTile","src","snippet","thumbnails","medium","url","alt","title","GridListTileBar","subtitle","description","to","onClick","SearchPageHandler","useEffect","CircularProgress","VideoPageHandler","useParams","opts","height","width","playerVars","autoplay","onReady","event","pauseVideo","App","Container","maxWidth","exact","from","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2LAMMA,EAAU,0CACZC,E,OAAgBC,EAAMC,OAAO,CAC/BC,QAAS,0CAQJ,SAASC,IAA8C,IAAjCC,EAAgC,uDAAxB,KAAMC,EAAkB,uDAAN,KACrD,OAAO,SAASC,GAEdA,EAAS,CACPC,KAhB4B,qBAiB5BC,SAAS,IAGX,IAAIC,EAAWL,EAAQ,UAAY,UAC/BM,EAAS,CACXC,IAAKb,EACLc,WAAY,GACZC,KAAM,UACNC,MAAO,eAGLV,IACFM,EAAOK,EAAIX,GAGTC,IACFK,EAAOL,UAAYA,GAGrBN,EAAciB,IAAIP,EAAU,CAAEC,WAC7BO,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZZ,EAAS,CACPC,KA1CsB,iBA2CtBC,QAASU,EAAIG,UAGhBC,OAAM,SAAAC,GACLjB,EAAS,CACPC,KAhDsB,iBAiDtBC,QAAS,CAACgB,cAAe,KAAMC,MAAO,MAGxCN,QAAQO,MAAMH,OCpDpB,IAAMI,EAAe,CACnBC,OAAQ,GAERJ,cAAe,KACfK,WAAW,G,YCEEC,EAJDC,aDKP,WAAqD,IAA/BC,EAA8B,uDAAtBL,EAAcM,EAAQ,uCACzD,OAAQA,EAAO1B,MACb,IDT0B,iBCUxB,OAAO,2BACFyB,GADL,IAEEJ,OAAO,GAAD,mBAAMI,EAAMJ,QAAZ,YAAuBK,EAAOzB,QAAQiB,QAC5CD,cAAeS,EAAOzB,QAAQgB,cAC9BK,WAAW,IAOf,IDnB8B,qBCoB5B,OAAO,2BACFG,GADL,IAEEH,UAAWI,EAAOzB,UAEtB,QACE,OAAOwB,KCzB2BE,YAAgBC,M,iDCgBzCC,EAlBIC,aAAW,SAACC,GAAD,MAAY,CACvCC,UAAW,CACRC,WAAY,GACZC,cAAe,GACfC,UAAW,UAEfC,UAAW,CACTC,aAAc,IAEhBC,SAAU,CACRC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,O,mCCFZ,IAEeC,EAFOC,aAVtB,SAAyBpB,GACvB,MAAO,MAGT,SAA4B1B,GAC1B,MAAO,CACLH,aAAc,SAACkD,GAAD,OAAkB/C,EAASH,EAAakD,QAIpCD,ECRP,YAAwC,IAAjBjD,EAAgB,EAAhBA,aAE9BmD,EAAUlB,IAFoC,EAIpBmB,YAAc,SAAUC,KAJJ,mBAI7CC,EAJ6C,KAIhCC,EAJgC,KAepD,OACE,kBAACC,EAAA,EAAD,CACEC,MAAOH,EACPI,SAAU,gBAZOzD,EAYMwD,EAAb,EAAGE,OAAUF,OAZNxD,EAYgCwD,GAXzCG,OAAS,GACjBL,EAAStD,GACTD,EAAaC,IAEbsD,OAASM,IAQTC,UAAWX,EAAQX,UACnBuB,WAAS,EACTC,QAAQ,WACRC,WAAY,CACVC,aACE,kBAACC,EAAA,EAAD,CAAgBxB,SAAS,OACvB,kBAACyB,EAAA,EAAD,a,2BCrBG,SAASC,EAAT,GAA0E,IAArD5C,EAAoD,EAApDA,OAAQJ,EAA4C,EAA5CA,cAAerB,EAA6B,EAA7BA,aAAcsD,EAAe,EAAfA,YAEjEH,EAAUlB,IAEhB,SAASqC,EAAMC,GACb,MAAsB,kBAAPA,GAA0B,OAAPA,EACxBA,EAAGC,QACHD,EAGZ,OAAO,oCACC,kBAACE,EAAA,EAAD,CAAUC,WAAY,IAAKC,KAAM,GAC5BlD,EAAOmD,KAAI,SAACC,GAAD,OACV,kBAACC,EAAA,EAAD,CAActE,IAAK8D,EAAMO,EAAMN,KAC7B,yBAAKQ,IAAKF,EAAMG,QAAQC,WAAWC,OAAOC,IAAKC,IAAKP,EAAMG,QAAQK,QAElE,kBAACC,EAAA,EAAD,CACID,MAAOR,EAAMG,QAAQK,MACrBE,SAAU,8BAAOV,EAAMG,QAAQQ,eAGnC,kBAAC,IAAD,CAAMC,GAAI,WAAanB,EAAMO,EAAMN,IAAKT,UAAWX,EAAQT,gBAKjE,4BAAQgD,QAAS1F,EAAasD,EAAajC,IAA3C,c,aClBZ,IAEesE,EAFW1C,aAd1B,SAAyBpB,GACvB,MAAO,CACLJ,OAAQI,EAAMJ,OACdC,UAAWG,EAAMH,UACjBL,cAAeQ,EAAMR,kBAIzB,SAA4BlB,GAC1B,MAAO,CACLH,aAAc,SAACkD,GAAD,OAAkB/C,EAASH,EAAakD,QAIhCD,ECTX,YAAyE,IAAnDxB,EAAkD,EAAlDA,OAAQC,EAA0C,EAA1CA,UAAWL,EAA+B,EAA/BA,cAAerB,EAAgB,EAAhBA,aAAgB,EAE/DoD,YAAc,SAAUC,KAAvCC,EAF8E,oBAQrF,OAJAsC,qBAAU,WACN5F,EAAasD,KACd,CAACA,EAAatD,IAEV,oCACH,kBAAC,EAAD,MAGE0B,EACI,kBAACmE,EAAA,EAAD,MACkB,IAAlBpE,EAAOmC,OACP,0CACA,kBAACS,EAAD,CACM5C,OAAQA,EACRJ,cAAeA,EACfrB,aAAcA,EACdsD,YAAaA,Q,QCf/B,IAEewC,EAFU7C,aAXzB,SAAyBpB,GACvB,MAAO,CACLgD,MAAOhD,EAAMgD,MACbnD,UAAWG,EAAMH,cAIrB,SAA4BvB,GAC1B,MAAO,KAGgB8C,ECVV,WAAkB,IACrBuB,EAAYuB,cAAZvB,QAeN,OAAO,kBAAC,IAAD,CAASA,QAASA,EACPwB,KAdD,CACfC,OAAQ,MACRC,MAAO,MACPC,WAAY,CAEVC,SAAU,IAUIC,QANlB,SAAqBC,GACnBA,EAAM3C,OAAO4C,mBCeNC,EAvBF,WAEX,IAAMrD,EAAUlB,IAEhB,OACA,kBAACwE,EAAA,EAAD,CAAWC,SAAS,KAAK5C,UAAWX,EAAQf,WAC1C,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUuE,OAAK,EAACC,KAAK,IAAInB,GAAG,YAC5B,kBAAC,IAAD,CAAOoB,KAAK,WACV,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CAAOA,KAAK,oBACV,kBAAC,EAAD,WCZUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAD,CAAUzF,MAAOA,GACf,kBAAC,EAAD,OAEF0F,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3G,MAAK,SAAA4G,GACJA,EAAaC,gBAEdxG,OAAM,SAAAI,GACLP,QAAQO,MAAMA,EAAMqG,a","file":"static/js/main.502b33a0.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const SET_VIDEO_LIST = 'SET_VIDEO_LIST';\nexport const SET_VIDEO = 'SET_VIDEO';\nexport const SET_LOADING_STATUS = 'SET_LOADING_STATUS';\n\nconst api_key = 'AIzaSyD53VjJoB5OJsHa-_iQApbYU056DwOpxpg';\nlet axiosInstance = axios.create({    \n  baseURL: 'https://www.googleapis.com/youtube/v3',\n// params: {\n//     key: api_key,\n//     maxResults: 10,\n//     part: 'snippet'\n// }\n});\n\nexport function getVideoList(query = null, pageToken = null) {\n  return function(dispatch) {\n\n    dispatch({\n      type: SET_LOADING_STATUS,\n      payload: true\n    })\n\n    let endpoint = query ? '/search' : '/videos';\n    let params = {\n      key: api_key,\n      maxResults: 10,\n      part: 'snippet',\n      chart: 'mostPopular',\n    }\n\n    if (query) {\n      params.q = query;\n    }\n\n    if (pageToken) {\n      params.pageToken = pageToken;\n    }\n\n    axiosInstance.get(endpoint, { params })   \n    .then(res => {\n      console.log(res);\n      dispatch({\n        type: SET_VIDEO_LIST,\n        payload: res.data\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: SET_VIDEO_LIST,\n        payload: {nextPageToken: null, items: []}\n      })\n  \n      console.error(err)\n    });\n  }\n};\n\n// export function getVideo(id) {\n//   return function(dispatch) {\n//     axiosInstance.get('/videos/' + id)\n//       .then(res => {\n//         dispatch({\n//           type: SET_VIDEO,\n//           payload: res.data\n//         })\n//       })\n//       .catch(err => console.error(err))\n//   }\n// };\n","import { SET_VIDEO_LIST, SET_VIDEO, SET_LOADING_STATUS } from \"./actions\";\n\nconst initialState = {\n  videos: [],\n  // video: null,\n  nextPageToken: null,\n  isLoading: true\n};\n\nexport function getNextState(state = initialState, action) {\n  switch (action.type) {\n    case SET_VIDEO_LIST:\n      return {\n        ...state,\n        videos: [...state.videos, ...action.payload.items],\n        nextPageToken: action.payload.nextPageToken,\n        isLoading: false\n      };\n    // case SET_VIDEO: \n    //   return {\n    //     ...state,\n    //     video: action.payload\n    //   };\n    case SET_LOADING_STATUS: \n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import {createStore, applyMiddleware} from 'redux';\nimport { getNextState } from './reducers';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(getNextState, applyMiddleware(thunk));\n\n\n\nexport default store;\n","import { makeStyles } from '@material-ui/core/styles';\n\n const useStyles = makeStyles((theme) => ({\n   container: {\n      paddingTop: 40,\n      paddingBottom: 40,\n      textAlign: 'center'\n   },\n  textField: {\n    marginBottom: 40\n  },\n  listLink: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n}));\n\nexport default useStyles;\n","import { connect } from 'react-redux';\nimport { getVideoList } from '../redux/actions';\nimport Search from './Search';\n\nfunction mapStateToProps(state) {\n  return { };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getVideoList: (searchString) => dispatch(getVideoList(searchString))\n  }\n}\n\nconst SearchHandler = connect(mapStateToProps, mapDispatchToProps)(Search);\n\nexport default SearchHandler;\n","import React from 'react';\nimport { TextField, InputAdornment } from '@material-ui/core';\nimport { Search } from '@material-ui/icons';\nimport useStyles from './../styles/';\nimport { useQueryParam, StringParam } from 'use-query-params';\n\nexport default function FilesSearch({ getVideoList }) {\n\n  const classes = useStyles();\n\n  const [searchQuery, setQuery] = useQueryParam('search', StringParam);\n\n  function changeQuery(query) {\n    if (query.length > 4) {\n      setQuery(query)\n      getVideoList(query);\n    } else {\n      setQuery(undefined)\n    }\n  }\n\n  return (\n    <TextField\n      value={searchQuery}\n      onChange={({ target: { value } }) => changeQuery(value)}\n      className={classes.textField}\n      fullWidth\n      variant=\"standard\"\n      InputProps={{\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <Search />\n          </InputAdornment>\n        ),\n      }}\n    />\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { \n  GridList, \n  GridListTile, \n  GridListTileBar \n } from '@material-ui/core';\nimport useStyles from './../styles/';\n\nexport default function VideoList({ videos, nextPageToken, getVideoList, searchQuery }) {\n\n  const classes = useStyles();\n\n  function getId(id) {\n    return (typeof id === 'object' && id !== null) \n            ? id.videoId \n            : id\n  }\n\n  return <>\n          <GridList cellHeight={160} cols={2}>\n              {videos.map((video) => (\n                <GridListTile key={getId(video.id)} >\n                  <img src={video.snippet.thumbnails.medium.url} alt={video.snippet.title} />\n              \n                  <GridListTileBar\n                      title={video.snippet.title}\n                      subtitle={<span>{video.snippet.description}</span>}\n                  />\n\n                  <Link to={'/videos/' + getId(video.id)} className={classes.listLink} />\n                </GridListTile>\n              ))}\n            </GridList>\n\n            <button onClick={getVideoList(searchQuery, nextPageToken)} >Load more</button>\n          </>\n}\n\n","import { connect } from 'react-redux';\nimport { getVideoList } from '../redux/actions';\nimport SearchPage from './SearchPage';\n\nfunction mapStateToProps(state) {\n  return {\n    videos: state.videos,\n    isLoading: state.isLoading,\n    nextPageToken: state.nextPageToken\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getVideoList: (searchString) => dispatch(getVideoList(searchString)),\n  }\n}\n\nconst SearchPageHandler = connect(mapStateToProps, mapDispatchToProps)(SearchPage);\n\nexport default SearchPageHandler;","import React, { useEffect } from 'react';\nimport { useQueryParam, StringParam } from 'use-query-params';\nimport SearchHandler from './SearchHandler';\nimport VideoList from './VideoList';\n\nimport { \n  CircularProgress, \n } from '@material-ui/core';\n\nexport default function SearchPage({ videos, isLoading, nextPageToken, getVideoList }) {\n  \n  const [searchQuery] = useQueryParam('search', StringParam);\n\n  useEffect(() => { \n      getVideoList(searchQuery)\n  }, [searchQuery, getVideoList]);\n\n  return <>\n      <SearchHandler />\n\n      {\n        isLoading\n          ? <CircularProgress />\n          : videos.length === 0\n          ? <b>No results.</b>\n          : <VideoList \n                  videos={videos} \n                  nextPageToken={nextPageToken} \n                  getVideoList={getVideoList}\n                  searchQuery={searchQuery} />\n      }\n  </>\n}\n\n","import { connect } from 'react-redux';\nimport VideoPage from './VideoPage';\n\nfunction mapStateToProps(state) {\n  return {\n    video: state.video,\n    isLoading: state.isLoading\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return { }\n}\n\nconst VideoPageHandler = connect(mapStateToProps, mapDispatchToProps)(VideoPage);\n\nexport default VideoPageHandler;","import React from 'react';\nimport { useParams } from \"react-router-dom\";\nimport YouTube from 'react-youtube';\n\nexport default function Video() {\n    const { videoId } = useParams();\n\n    const playerOpts = {\n        height: '390',\n        width: '640',\n        playerVars: {\n          // https://developers.google.com/youtube/player_parameters\n          autoplay: 1,\n        },\n      };\n\n      function playerReady(event) {\n        event.target.pauseVideo();\n      }\n\n      return <YouTube videoId={videoId} \n                        opts={playerOpts} \n                        onReady={playerReady} />;\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { QueryParamProvider } from 'use-query-params';\nimport { Container } from '@material-ui/core';\nimport useStyles from './styles';\n\nimport SearchPageHandler from './components/SearchPageHandler';\nimport VideoPageHandler from './components/VideoPageHandler';\n\n const App = () => {\n\n  const classes = useStyles();\n\n  return (\n  <Container maxWidth='md' className={classes.container}>\n    <Router>\n      <Switch>\n        <Redirect exact from='/' to=\"/videos\" />\n        <Route path='/videos' >\n          <QueryParamProvider >\n            <SearchPageHandler />\n          </QueryParamProvider>\n        </Route>\n        <Route path='/videos/:videoId' >\n          <VideoPageHandler />\n        </Route>\n      </Switch>\n    </Router>\n  </Container>\n)}\n;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}